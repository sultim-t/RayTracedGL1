// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require

#define DESC_SET_TLAS 0
#define DESC_SET_FRAMEBUFFERS 1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#define DESC_SET_RANDOM 5
#define DESC_SET_LIGHT_SOURCES 6
#define DESC_SET_CUBEMAPS 7
#include "RaygenCommon.h"

vec3 getRayDir(vec2 inUV)
{
    inUV = inUV * 2.0 - 1.0;
    
    vec4 target = globalUniform.invProjection * vec4(inUV.x, inUV.y, 1, 1);
    vec4 rayDir = globalUniform.invView * vec4(normalize(target.xyz / target.w), 0);
    
    return rayDir.xyz;
}

void main() 
{
    const vec3 origin = globalUniform.cameraPosition.xyz;

    const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

    const float AX = 1.0 / globalUniform.renderWidth;
    const float AY = 1.0 / globalUniform.renderHeight;

    vec3 rayDir   = getRayDir(inUV);
    vec3 rayDirAX = getRayDir(inUV + vec2(AX, 0.0));
    vec3 rayDirAY = getRayDir(inUV + vec2(0.0, AY));

    imageStore(framebufViewDirection, pix, vec4(rayDir, 0.0));

    const uint randomSeed = getRandomSeed(pix, globalUniform.frameId, globalUniform.renderWidth, globalUniform.renderHeight);
    imageStore(framebufRandomSeed, pix, uvec4(randomSeed));
    
    
    const ShPayload p = tracePrimaryRay(origin, rayDir);


    // was hit
    if (p.clsHitDistance > 0)
    {
        vec2 motionCurToPrev;
        float motionDepthLinearCurToPrev;
        vec2 gradDepth;
        float depthNDC;
        const ShHitInfo h = getHitInfoGrad(p, origin, rayDirAX, rayDirAY, motionCurToPrev, motionDepthLinearCurToPrev, gradDepth, depthNDC);

        const vec3 clsHitPoint = origin + rayDir * p.clsHitDistance;

        imageStore(framebufAlbedo,              pix, vec4(h.albedo, 0));
        imageStore(framebufNormal,              pix, vec4(h.normal, uintBitsToFloat(h.instCustomIndex)));
        imageStore(framebufNormalGeometry,      pix, vec4(h.normalGeom, 0));
        imageStore(framebufMetallicRoughness,   pix, vec4(h.metallic, h.roughness, 0, 0));
        imageStore(framebufDepth,               pix, vec4(h.linearDepth, gradDepth, depthNDC));
        imageStore(framebufMotion,              pix, vec4(motionCurToPrev, motionDepthLinearCurToPrev, 0.0));
        imageStore(framebufSurfacePosition,     pix, vec4(clsHitPoint, p.clsHitDistance));
        imageStore(framebufVisibilityBuffer,    pix, packVisibilityBuffer(p));

        return;
    }

    // if sky is a rasterized geometry, it was rendered to albedo framebuf 
    if (globalUniform.skyType != SKY_TYPE_RASTERIZED_GEOMETRY)
    {
        vec3 color = getSkyPrimary(rayDir);
        imageStore(framebufAlbedo,          pix, vec4(color, 0.0));
    }

    imageStore(framebufNormal,              pix, vec4(0.0));
    imageStore(framebufNormalGeometry,      pix, vec4(0.0));
    imageStore(framebufMetallicRoughness,   pix, vec4(0.0));
    imageStore(framebufDepth,               pix, vec4(MAX_RAY_LENGTH * 2.0, 0.0, 0.0, MAX_RAY_LENGTH * 2.0));
    imageStore(framebufMotion,              pix, vec4(0.0));
    imageStore(framebufSurfacePosition,     pix, vec4(0.0));
    imageStore(framebufVisibilityBuffer,    pix, vec4(UINT32_MAX));
}
